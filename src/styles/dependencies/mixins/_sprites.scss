// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$axa-name: 'axa';
$axa-x: 0px;
$axa-y: 0px;
$axa-offset-x: 0px;
$axa-offset-y: 0px;
$axa-width: 1200px;
$axa-height: 1200px;
$axa-total-width: 1524px;
$axa-total-height: 1200px;
$axa-image: '../assets/img/sprite/sprite.png';
$axa: (0px, 0px, 0px, 0px, 1200px, 1200px, 1524px, 1200px, '../assets/img/sprite/sprite.png', 'axa', );
$logo-name: 'logo';
$logo-x: 1220px;
$logo-y: 0px;
$logo-offset-x: -1220px;
$logo-offset-y: 0px;
$logo-width: 304px;
$logo-height: 59px;
$logo-total-width: 1524px;
$logo-total-height: 1200px;
$logo-image: '../assets/img/sprite/sprite.png';
$logo: (1220px, 0px, -1220px, 0px, 304px, 59px, 1524px, 1200px, '../assets/img/sprite/sprite.png', 'logo', );
$orient-logo-name: 'orient_logo';
$orient-logo-x: 1220px;
$orient-logo-y: 79px;
$orient-logo-offset-x: -1220px;
$orient-logo-offset-y: -79px;
$orient-logo-width: 236px;
$orient-logo-height: 68px;
$orient-logo-total-width: 1524px;
$orient-logo-total-height: 1200px;
$orient-logo-image: '../assets/img/sprite/sprite.png';
$orient-logo: (1220px, 79px, -1220px, -79px, 236px, 68px, 1524px, 1200px, '../assets/img/sprite/sprite.png', 'orient_logo', );
$salama-name: 'salama';
$salama-x: 1220px;
$salama-y: 167px;
$salama-offset-x: -1220px;
$salama-offset-y: -167px;
$salama-width: 90px;
$salama-height: 30px;
$salama-total-width: 1524px;
$salama-total-height: 1200px;
$salama-image: '../assets/img/sprite/sprite.png';
$salama: (1220px, 167px, -1220px, -167px, 90px, 30px, 1524px, 1200px, '../assets/img/sprite/sprite.png', 'salama', );
$spritesheet-width: 1524px;
$spritesheet-height: 1200px;
$spritesheet-image: '../assets/img/sprite/sprite.png';
$spritesheet-sprites: ($axa, $logo, $orient-logo, $salama, );
$spritesheet: (1524px, 1200px, '../assets/img/sprite/sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
